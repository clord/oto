// Code generated by oto; DO NOT EDIT.

import { z } from 'zod';
import type { Schema, ZodTypeDef, ZodError } from 'zod';

type JsonPrimitive = string | number | boolean | undefined;
export type Json = JsonPrimitive | JsonObject | JsonArray;
type JsonObject = { [member: string]: Json } | {};
interface JsonArray extends ReadonlyArray<Json> {}

export type ClientResponse =
  | {
      success: false;
      error: { status: number; statusText: string; message: string };
    }
  | { success: true; payload: Json };

export type Client = {
  fetch: (path: string, payload: Json) => Promise<ClientResponse>;
};

/**
 * Decode json to a zod schema
 */
export async function decodeJson<T extends { error?: string }>(
  something: Json,
  schema: Schema<T, ZodTypeDef, Json>
): Promise<APIResponse<T>> {
  const result = await schema.safeParseAsync(something);
  if (result.success) {
    const { error } = result.data;
    if (error !== undefined && error?.length > 0) {
      return {
        success: false,
        error: {
          status: 400,
          statusText: 'API error',
          message: error,
        },
      };
    }
  }
  return result;
}

export type APIResponse<T> =
  | {
      success: false;
      error: ZodError<Json> | { status: number; statusText: string; message: string };
    }
  | { success: true; data: Omit<T, 'error'> };


// GreetRequest is the request object for GreeterService.Greet.
export function GreetRequestSchema() { return z.object({
    
     name:  z.string()  ,
  });
}

  export type GreetRequest = z.infer<ReturnType<typeof GreetRequestSchema>>;



// GreetResponse is the response object containing a person's greeting.
export function GreetResponseSchema() { return z.object({
    
     greeting:  z.string()  ,
     error:  z.string()  ,
  });
}

  export type GreetResponse = z.infer<ReturnType<typeof GreetResponseSchema>>;






// GreeterService is a polite API for greeting people.
export class GreeterService {
  private readonly _client: Client;
  public constructor(client: Client) {
    this._client = client;
  }
  
  // Greet prepares a lovely greeting.
public async greet(greetRequest: GreetRequest): Promise<
 APIResponse<GreetResponse> 
  > {
    const response = await this._client.fetch('GreeterService.Greet', greetRequest);
    if (!response.success) {
      return response;
    }
    return decodeJson(response.payload, GreetResponseSchema());
  }
  
}


